// import * as React from "react";
// import Accordion from "@mui/material/Accordion";
// import AccordionDetails from "@mui/material/AccordionDetails";
// import AccordionSummary from "@mui/material/AccordionSummary";
// import Typography from "@mui/material/Typography";
// import ExpandMoreIcon from "@mui/icons-material/ExpandMore";
// import axios from "axios";
// import { TextField } from "@mui/material";
// import { useDispatch, useSelector } from "react-redux";
// import { getAllPatient, getAllStaff } from "../../slices/thunk";
// import { Button } from "primereact/button";

// export default function ControlledAccordions() {
//   const [expandedPanel1, setExpandedPanel1] = React.useState<string | false>(
//     false
//   );

//   const dispatch = useDispatch()
//   const org = useSelector((state:any) => state.Login.organization)
//   const {patientData} =  useSelector((state:any) => state.Patient)
//   const {staffData} =  useSelector((state:any) => state.Staff)
//   const[report, setReport]= React.useState<any>(null)
//   const[date, setDate]=React.useState("")
//   const[date1, setDate1]=React.useState("")
//   const[q15Date, setQ15Date]=React.useState("")
//   const[data, setData]=React.useState(patientData)
//   const formattedDate = date || new Date().toISOString().slice(0, 10).replace(/-/g, "");

//   const [expandedPanels1, setExpandedPanels1] = React.useState<Array<string | false>>(Array(patientData.length).fill(false));
//   const [expandedPanels2, setExpandedPanels2] = React.useState<Array<string | false>>(Array(patientData.length).fill(false));
//   const [expandedPanels3, setExpandedPanels3] = React.useState<Array<string | false>>(Array(patientData.length).fill(false));
//   const [expandedPanels4, setExpandedPanels4] = React.useState<Array<string | false>>(Array(patientData.length).fill(false));

//     React.useEffect(() => {
//       getAllPatient(dispatch,org)
//       getAllStaff(dispatch,org)
//     },[dispatch])

//     React.useEffect(() => {
//       setData(patientData)
//     },[patientData])
    
//     const getPName = (pid: string) => {
//       const patient = data?.find((item: any) => item.id == pid);
//       if (patient ) {
//         return patient.basicDetails[0].name[0].given + " " + patient.basicDetails[0].name[0].family;
//       } else {
//         return "--";
//       }
//     };

//     const getInName = (id: string) => {
//       const staff = staffData?.find((item: any) => item.id == id);
//       if (staff ) {
//         return " " + staff.name[0].given + " " + staff.name[0].family;
//       } else {
//         return " " + "N/A";
//       }
//     };

//     const handleViewDetails = async (date:any) => {
//       try {
//         // console.log(formattedDate)
//         date?setDate(date):setDate(formattedDate)
//         const response = await axios.get(`http://47.32.254.89:7000/api/config/getByDate/${date}`);
//         const reportData = response.data.data;
//         setReport(reportData)
//       } catch (error) {
//         console.error("Failed to fetch staff details", error);
//       }
//     };
//     // const handleViewDetails = async (date:any) => {
//     //   try {
//     //     // console.log(formattedDate)
//     //     date?setDate(date):setDate(formattedDate)
//     //     const response = await axios.get(`http://47.32.254.89:7000/api/config/getByDateRange?startDate=${date}`);
//     //     const reportData = response.data.data;
//     //     setReport(reportData)
//     //   } catch (error) {
//     //     console.error("Failed to fetch staff details", error);
//     //   }
//     // };

//   React.useEffect(() => {
//     handleViewDetails(formattedDate)
//     // console.log(report)
//   }, [date]);

//   const handleChangePanel1 = (
//     event: React.SyntheticEvent,
//     isExpanded: boolean
//   ) => {
//     setExpandedPanel1(isExpanded ? "panel1" : false);
//   };

//   const handleChangePanel = (index: number, setExpandedPanelsFunction: React.Dispatch<React.SetStateAction<Array<string | false>>>) => (
//     event: React.SyntheticEvent,
//     isExpanded: boolean
//   ) => {
//     setExpandedPanelsFunction((prevExpandedPanels) => {
//       const newExpandedPanels = [...prevExpandedPanels];
//       newExpandedPanels[index] = isExpanded ? `panel${index + 1}` : false;
//       return newExpandedPanels;
//     });
//   };

//   const generateTimeSlot = (slot:any,item:any) => (
//     <div
//       className="col-md-1 d-flex justify-content-between flex-column align-items-center"
//       style={{ border: '2px solid #6581BC', borderRadius: '7px', width: '80px', height: '60px' }}
//     >
//       <div className="box" style={{ borderBottom: '1px solid #6581BC', height: '30px' }}>{slot}</div>
//       <div className="box">
//         {item.data
//           .filter((item:any) => item.q15Slot === slot)
//           .map((filteredItem:any) => (
//             <div key={filteredItem.id}>
//               <p>{filteredItem ? filteredItem.location : "-"} { "-" } {filteredItem ? filteredItem.activity : "-"}</p>
//             </div>
//           ))}
//       </div>
//     </div>
//   );

//   return (
//     <div className="row d-flex flex-column">
//         <div className="row"> <h4>Q15 Report</h4>
//         </div>
//         <div className="row">
//           <div className="col-md-2 h-100 d-flex flex-column"style={{backgroundColor:'#EAF2FA'}}>
//             <TextField className="m-3" id="outlined-basic-1" label="Q15 Date" variant="outlined" onChange={(e:any) => setQ15Date(e.target.value)}/>
//             <TextField className="m-3" id="outlined-basic-1" label="shift" variant="outlined" onChange={(e:any) => setDate(e.target.value)}/>
//             <TextField className="m-3" id="outlined-basic-1" label="slot" variant="outlined" onChange={(e:any) => setDate(e.target.value)}/>
//             <TextField className="m-3" id="outlined-basic-1" label="patient name" variant="outlined" onChange={(e:any) => setDate(e.target.value)}/>
//             <TextField className="m-3" id="outlined-basic-1" label="nurse Incharge" variant="outlined" onChange={(e:any) => setDate(e.target.value)}/>
//             <Button label="Save" style={{ backgroundColor: '#0f3995' }} onClick={() => handleViewDetails(q15Date)} />

//           </div>
//           <div className="col-md-10">
//             <Accordion
//                 expanded={expandedPanel1 === "panel1"}
//                 onChange={handleChangePanel1}
//       >
//         <AccordionSummary
//           expandIcon={<ExpandMoreIcon />}
//           aria-controls="panel1bh-content"
//           id="panel1bh-header"
//         >
//           <Typography sx={{ width: "33%", flexShrink: 0 }}>
//             Date : {date}
//           </Typography>
//           <Typography sx={{ color: "text.secondary" }}>Print</Typography>
//         </AccordionSummary>
//         <AccordionDetails>
//         {report && (
//         <>
//           {report.map((item:any, index:any) => (
            
//           <Accordion
//           key={index}
//           expanded={expandedPanels1[index] === `panel${index + 1}`}
//           onChange={handleChangePanel(index, setExpandedPanels1)}
//           >
//             <AccordionSummary
//               expandIcon={<ExpandMoreIcon />}
//               aria-controls="panel2bh-content"
//               id="panel2bh-header"
//             >
//               <Typography sx={{ width: "33%", flexShrink: 0 }}>
//                 Patient Name : { getPName(item.pid) }
//               </Typography>
//               <Typography sx={{ color: "text.secondary" }}>Shift</Typography>
//             </AccordionSummary>
//             <AccordionDetails>
//               <Accordion
//                   key={index}
//                   expanded={expandedPanels2[index] === `panel${index + 1}`}
//                   onChange={handleChangePanel(index, setExpandedPanels2)}
//                 style={{ backgroundColor: "#F7FAFE" }}
//               >
//                 <AccordionSummary
//                   expandIcon={<ExpandMoreIcon />}
//                   aria-controls="panel3bh-content"
//                   id="panel3bh-header"
//                 >
//                   <Typography sx={{ width: "33%", flexShrink: 0 }}>
//                     Shift A : {getInName(item.shiftIncharge.shiftInchargeA)}
//                   </Typography>
//                 </AccordionSummary>
//                 <AccordionDetails>
//                 <div className="row my-2 gap-2">
            
//                 <div className="col-md-3">
//                   <div className="box" style={{ textAlign: 'end' }}>06:00 AM to 07:45 AM:</div>
//                   <div className="box" style={{ textAlign: 'end' }}>SocialWorkers:{getInName(item.enteredBy.shiftA.slot1)}</div>
//                 </div>
//                     {['A06', 'B06', 'C06', 'D06', 'A07', 'B07', 'C07', 'D07'].map((slot) => generateTimeSlot(slot,item))}
//               </div>

//                 <div className="row mb-2 gap-2">
                
//                     <div className="col-md-3">
//                     <div className="box" style={{ textAlign: 'end' }}>08:00 AM to 09:45 AM:</div>
//                     <div className="box" style={{ textAlign: 'end' }}>SocialWorkers:{getInName(item.enteredBy.shiftA.slot2)}</div>
//                 </div>
//                     {['A08', 'B08', 'C08', 'D08', 'A09', 'B09', 'C09', 'D09'].map((slot) => generateTimeSlot(slot,item))}
//               </div>

//               <div className="row gap-2">
                
//                     <div className="col-md-3">
//                     <div className="box" style={{ textAlign: 'end' }}>10:00 AM to 11:45 AM:</div>
//                     <div className="box" style={{ textAlign: 'end' }}>SocialWorkers:{getInName(item.enteredBy.shiftA.slot3)}</div>
//                 </div>
//                     {['A10', 'B10', 'C10', 'D10', 'A11', 'B11', 'C11', 'D11'].map((slot) => generateTimeSlot(slot,item))}
//               </div>

//               <div className="row my-2 gap-2">
            
//                 <div className="col-md-3">
//                   <div className="box" style={{ textAlign: 'end' }}>12:00 AM to 13:45 AM:</div>
//                   <div className="box" style={{ textAlign: 'end' }}>SocialWorkers:{getInName(item.enteredBy.shiftA.slot4)}</div>
//                 </div>
//                     {['A12', 'B12', 'C12', 'D12', 'A13', 'B13', 'C13', 'D13'].map((slot) => generateTimeSlot(slot,item))}
//               </div>     
//                 </AccordionDetails>
//               </Accordion>
//               <Accordion
//                 key={index}
//                 expanded={expandedPanels3[index] === `panel${index + 1}`}
//                 onChange={handleChangePanel(index, setExpandedPanels3)}
//                 style={{ backgroundColor: "#F7FAFE" }}
//               >
//                 <AccordionSummary
//                   expandIcon={<ExpandMoreIcon />}
//                   aria-controls="panel4bh-content"
//                   id="panel4bh-header"
//                 >
//                   <Typography sx={{ width: "33%", flexShrink: 0 }}>
//                     Shift B : {getInName(item.shiftIncharge.shiftInchargeB)}
//                   </Typography>
//                 </AccordionSummary>
//                 <AccordionDetails>
//                 <div className="row my-2 gap-2">
            
//                 <div className="col-md-3">
//                   <div className="box" style={{ textAlign: 'end' }}>14:00 AM to 15:45 AM:</div>
//                   <div className="box" style={{ textAlign: 'end' }}>SocialWorkers:{getInName(item.enteredBy.shiftB.slot1)}</div>
//                 </div>
//                     {['A14', 'B14', 'C14', 'D14', 'A15', 'B15', 'C15', 'D15'].map((slot) => generateTimeSlot(slot,item))}
//               </div>

//                 <div className="row mb-2 gap-2">
                
//                     <div className="col-md-3">
//                     <div className="box" style={{ textAlign: 'end' }}>16:00 AM to 17:45 AM:</div>
//                     <div className="box" style={{ textAlign: 'end' }}>SocialWorkers:{getInName(item.enteredBy.shiftB.slot2)}</div>
//                 </div>
//                     {['A16', 'B16', 'C16', 'D16', 'A17', 'B17', 'C17', 'D17'].map((slot) => generateTimeSlot(slot,item))}
//               </div>

//               <div className="row gap-2">
                
//                     <div className="col-md-3">
//                     <div className="box" style={{ textAlign: 'end' }}>18:00 AM to 19:45 AM:</div>
//                     <div className="box" style={{ textAlign: 'end' }}>SocialWorkers:{getInName(item.enteredBy.shiftB.slot3)}</div>
//                 </div>
//                     {['A18', 'B18', 'C18', 'D18', 'A19', 'B19', 'C19', 'D19'].map((slot) => generateTimeSlot(slot,item))}
//               </div>
              
//               <div className="row my-2 gap-2">
            
//                 <div className="col-md-3">
//                   <div className="box" style={{ textAlign: 'end' }}>20:00 AM to 21:45 AM:</div>
//                   <div className="box" style={{ textAlign: 'end' }}>SocialWorkers:{getInName(item.enteredBy.shiftB.slot4)}</div>
//                 </div>
//                     {['A20', 'B20', 'C20', 'D20', 'A21', 'B21', 'C21', 'D21'].map((slot) => generateTimeSlot(slot,item))}
//               </div>
//                 </AccordionDetails>
//               </Accordion>
//               <Accordion
//                 key={index}
//                 expanded={expandedPanels4[index] === `panel${index + 1}`}
//                 onChange={handleChangePanel(index, setExpandedPanels4)}
//                 style={{ backgroundColor: "#F7FAFE" }}
//               >
//                 <AccordionSummary
//                   expandIcon={<ExpandMoreIcon />}
//                   aria-controls="panel4bh-content"
//                   id="panel4bh-header"
//                 >
//                   <Typography sx={{ width: "33%", flexShrink: 0 }}>
//                     Shift C : {getInName(item.shiftIncharge.shiftInchargeC)}
//                   </Typography>
//                 </AccordionSummary>
//                 <AccordionDetails>
//                 <div className="row my-2 gap-2">
            
//                 <div className="col-md-3">
//                   <div className="box" style={{ textAlign: 'end' }}>22:00 AM to 23:45 AM:</div>
//                   <div className="box" style={{ textAlign: 'end' }}>SocialWorkers:{getInName(item.enteredBy.shiftC.slot1)}</div>
//                 </div>
//                     {['A22', 'B22', 'C22', 'D22', 'A23', 'B23', 'C23', 'D23'].map((slot) => generateTimeSlot(slot,item))}
//               </div>

//                 <div className="row mb-2 gap-2">
                
//                     <div className="col-md-3">
//                     <div className="box" style={{ textAlign: 'end' }}>00:00 AM to 01:45 AM:</div>
//                     <div className="box" style={{ textAlign: 'end' }}>SocialWorkers:{getInName(item.enteredBy.shiftC.slot2)}</div>
//                 </div>
//                     {['A00', 'B00', 'C00', 'D00', 'A01', 'B01', 'C01', 'D01'].map((slot) => generateTimeSlot(slot,item))}
//               </div>

//               <div className="row gap-2">
                
//                     <div className="col-md-3">
//                     <div className="box" style={{ textAlign: 'end' }}>01:00 AM to 02:45 AM:</div>
//                     <div className="box" style={{ textAlign: 'end' }}>SocialWorkers:{getInName(item.enteredBy.shiftC.slot3)}</div>
//                 </div>
//                     {['A01', 'B01', 'C01', 'D01', 'A02', 'B02', 'C02', 'D02'].map((slot) => generateTimeSlot(slot,item))}
//               </div>
              
//               <div className="row my-2 gap-2">
            
//                 <div className="col-md-3">
//                   <div className="box" style={{ textAlign: 'end' }}>02:00 AM to 03:45 AM:</div>
//                   <div className="box" style={{ textAlign: 'end' }}>SocialWorkers:{getInName(item.enteredBy.shiftC.slot4)}</div>
//                 </div>
//                     {['A02', 'B02', 'C02', 'D02', 'A03', 'B03', 'C03', 'D03'].map((slot) => generateTimeSlot(slot,item))}
//               </div>
//                 </AccordionDetails>
//               </Accordion>
//             </AccordionDetails>
//         </Accordion>
//           ))}
//       </>
//     )}
//   </AccordionDetails>
//   </Accordion>
//           </div>
//           </div>
//           </div>
//           );
//         }


import React, { useState, useEffect } from "react";
import Accordion from "@mui/material/Accordion";
import AccordionDetails from "@mui/material/AccordionDetails";
import AccordionSummary from "@mui/material/AccordionSummary";
import Typography from "@mui/material/Typography";
import ReactDOM from "react-dom";
import Rectangle6215 from './../../assets/images/Rectangle 6215.png';
import ExpandMoreIcon from "@mui/icons-material/ExpandMore";
import axios from "axios";
import { Autocomplete, FormControl, FormHelperText, InputLabel, MenuItem, Select, TextField, SelectChangeEvent, } from "@mui/material";
import { useDispatch, useSelector } from "react-redux";
import { getAllPatient, getAllStaff } from "../../slices/thunk";
import { Button } from "primereact/button";
import { AdapterDateFns } from "@mui/x-date-pickers/AdapterDateFns";
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { DatePicker } from '@mui/x-date-pickers/DatePicker';
import { HttpLogin } from "../../utils/Http";
import moment from 'moment';
export default function ControlledAccordions() {
    const [expandedPanel1, setExpandedPanel1] = React.useState<string | false>(
        false
    );

    const dispatch = useDispatch()
    const org = useSelector((state: any) => state.Login.organization)
    const { patientData } = useSelector((state: any) => state.Patient);
    const { staffData } = useSelector((state: any) => state.Staff);
    let [addCalendarDate, setAddCalendarDate] = useState(new Array<any>());
    let [tableData, setTableData] = useState(new Array<any>());
    const [report, setReport] = React.useState<any>(null)
    const [date, setDate] = React.useState("")
    const [date1, setDate1] = React.useState("")
    // const [q15Date, setQ15Date] = React.useState("")
    const [q15Date, setQ15Date] = React.useState<Date | null>(null);
    let [data, setData] = useState(new Array<any>());
    let [getStaffData, setStaffData] = useState(new Array<any>());
    let [calendarDate, setCalendarDate] = React.useState(new Date());
    const formattedDate = date || new Date().toISOString().slice(0, 10).replace(/-/g, "");
    let [newTimeSlot, setNewTimeSlot] = useState(new Array<any>());
    const [expandedPanels1, setExpandedPanels1] = React.useState<Array<string | false>>(Array(patientData.length).fill(false));
    const [expandedPanels2, setExpandedPanels2] = React.useState<Array<string | false>>(Array(patientData.length).fill(false));
    const [expandedPanels3, setExpandedPanels3] = React.useState<Array<string | false>>(Array(patientData.length).fill(false));
    const [expandedPanels4, setExpandedPanels4] = React.useState<Array<string | false>>(Array(patientData.length).fill(false));
    const addInputData = {
        shiftIncharge: "",
        criteria: "",
        patientName: "",
        slot: "",
        shift: "",
        startDate: null,
        endDate: null
    }

    function removeDuplicates(arr: any[]) {
        return arr.filter((item,
            index) => arr.indexOf(item) === index);
    }

    let [newInputData, setNewInputData] = useState(addInputData);
    function formatDate(epoch: any) {
        let d = new Date(epoch);
        let month = String((d.getMonth() + 1)).padStart(2, '0');
        let day = String((d.getDate())).padStart(2, '0');
        let hours = String((d.getHours())).padStart(2, '0');
        let mins = String((d.getMinutes())).padStart(2, '0');

        return `${hours}:${mins}`;
    }
    useEffect(() => {
        HttpLogin.axios().get("api/org/getById/" + org)
            .then((res) => {
                if (res.data.message.code === "MHC - 0200") {
                    var newResult = res.data.data.shift.startTime !== "" ? res.data.data.shift.startTime : "08:00"
                    const createTimeSlots = (fromTime: string, toTime: string, slotLength = 15 * 60) => {
                        fromTime = "2022-05-25 " + newResult;
                        toTime = "2022-05-26 " + newResult;
                        let slotStart = new Date(fromTime).valueOf();
                        let slotEnd = new Date(fromTime).valueOf() + slotLength * 1000;
                        let endEpoch = new Date(toTime).valueOf();
                        let ob = [];
                        for (slotEnd; slotEnd <= endEpoch; slotEnd = slotEnd + slotLength * 1000) {
                            ob.push(formatDate(slotStart));
                            slotStart = slotEnd;
                        }

                        return ob;
                    }


                    const from = "2022-05-25 " + newResult;
                    const to = "2022-05-26 " + newResult;
                    const slotLength = 15 * 60; //seconds             
                    var r = createTimeSlots(from, to, slotLength);

                    setNewTimeSlot(r);


                } else {

                }
            })

        setNewInputData({ ...newInputData });
        var from = newInputData.startDate !== null ? new Date(newInputData.startDate) : new Date();
        var dayCalendar = [];

        dayCalendar.push(new Date(from).toISOString().slice(0, 10).replace(/-/g, ""));

        // console.log(JSON.stringify(dayCalendar));
        // console.log(JSON.stringify(newInputData.startDate));
        // console.log(JSON.stringify(newInputData.endDate));
        setAddCalendarDate(dayCalendar);
        if (newInputData.startDate === null && newInputData.endDate === null) {

        }

        HttpLogin.axios().get("/api/config/get_all")
            .then((response) => {
            })
    }, []);

    React.useEffect(() => {
        getAllPatient(dispatch, org);
        getAllStaff(dispatch, org);
    }, [dispatch])

    React.useEffect(() => {
        setData(patientData !== null && patientData !== undefined && patientData.map((k: any) => { return k.basicDetails[0].name[0].given + " " + k.basicDetails[0].name[0].family }))
    }, [patientData])

    React.useEffect(() => {
        setStaffData(staffData !== null && staffData !== undefined && staffData.filter((t: any) => t.role === "Social Workers" || t.role === "Registered Nurses" || t.role === "Nurse Practitioner").map((k: any) => { return k.name[0].given + " " + k.name[0].family }))
    }, [staffData])

    const getInName = (id: string) => {
        const staff = staffData?.find((item: any) => item.id == id);
        if (staff) {
            return " " + staff.name[0].given + " " + staff.name[0].family;
        } else {
            return " " + "N/A";
        }
    };

    const handleViewDetails = async (date: any) => {
        try {
            // console.log(formattedDate)
            date ? setDate(date) : setDate(formattedDate)
            const response = await axios.get(`http://47.32.254.89:7000/api/config/getByDate/${date}`);
            const reportData = response.data.data;
            setReport(reportData)
        } catch (error) {
            console.error("Failed to fetch staff details", error);
        }
    };

    React.useEffect(() => {
        handleViewDetails(formattedDate)
        // console.log(report)
    }, [date]);

    const handleChangePanel1 = (
        event: React.SyntheticEvent,
        isExpanded: boolean
    ) => {
        setExpandedPanel1(isExpanded ? "panel1" : false);
    };

    const handleChangePanel = (index: number, setExpandedPanelsFunction: React.Dispatch<React.SetStateAction<Array<string | false>>>) => (
        event: React.SyntheticEvent,
        isExpanded: boolean
    ) => {
        setExpandedPanelsFunction((prevExpandedPanels) => {
            const newExpandedPanels = [...prevExpandedPanels];
            newExpandedPanels[index] = isExpanded ? `panel${index + 1}` : false;
            return newExpandedPanels;
        });
    };

    const handleDateChange = (event: any) => {
        newInputData.startDate = event;
        setNewInputData({ ...newInputData });

        var from = newInputData.startDate !== null ? new Date(newInputData.startDate) : new Date();
        let dayCalendar = [];
        var to = newInputData.endDate !== null ? new Date(newInputData.endDate) : new Date(calendarDate.getFullYear(), calendarDate.getMonth(), calendarDate.getDate());

        for (var day = from; day <= to; day.setDate(day.getDate() + 1)) {

            dayCalendar.push(new Date(day).toISOString().slice(0, 10).replace(/-/g, ""));
        }
        setAddCalendarDate(removeDuplicates(dayCalendar));
    }

    const handleNewDateChange = (event: any) => {
        newInputData.endDate = event;
        setNewInputData({ ...newInputData });

        var from = newInputData.startDate !== null ? new Date(newInputData.startDate) : new Date();
        var dayCalendar = [];
        var to = newInputData.endDate !== null ? new Date(newInputData.endDate) : new Date(calendarDate.getFullYear(), calendarDate.getMonth(), calendarDate.getDate());

        for (var day = from; day <= to; day.setDate(day.getDate() + 1)) {

            dayCalendar.push(new Date(day).toISOString().slice(0, 10).replace(/-/g, ""));
        }
        setAddCalendarDate(removeDuplicates(dayCalendar));

    }

    if (newInputData.endDate === null && newInputData.startDate !== null) {
        var newFromDate = new Date(newInputData.startDate).toISOString().slice(0, 10).replace(/-/g, "");
        var newToDate = new Date().toISOString().slice(0, 10).replace(/-/g, "");
        HttpLogin.axios().get("/api/config/getByDateRange?startDate=" + newFromDate + "&endDate=" + newToDate)
            .then((response) => {
                if (response.data.data !== null && response.data.data !== undefined) {
                    // console.log(JSON.stringify("/api/config/getByDateRange?startDate="+moment(newInputData.startDate).format("YYYYMMDD")+"&endDate="+moment(new Date()).format("YYYYMMDD")));                                       
                    // console.log(JSON.stringify(response.data))         
                    setTableData(response.data.data);
                }

            })
    } else if (newInputData.endDate !== null && newInputData.startDate !== null) {
        var newFromDate = new Date(newInputData.startDate).toISOString().slice(0, 10).replace(/-/g, "");
        var newToDate = new Date(newInputData.endDate).toISOString().slice(0, 10).replace(/-/g, "");
        HttpLogin.axios().get("/api/config/getByDateRange?startDate=" + newFromDate + "&endDate=" + newToDate)
            .then((response) => {
                if (response.data.data !== null && response.data.data !== undefined) {
                    // console.log(JSON.stringify("/api/config/getByDateRange?startDate="+moment(newInputData.startDate).format("YYYYMMDD")+"&endDate="+moment(new Date()).format("YYYYMMDD")));                                       
                    // console.log(JSON.stringify(response.data))         
                    setTableData(response.data.data);
                }

            })
    } else if (newInputData.endDate === null && newInputData.startDate === null) {
        HttpLogin.axios().get("/api/config/getByDate/" + addCalendarDate[0])
            .then((response) => {
                // console.log(JSON.stringify(newInputData.endDate));
                if (response.data.data !== undefined && response.data.data !== null) {
                    setTableData(response.data.data);
                }
            })
    }

    const [expanded, setExpanded] = React.useState<string | false>('panel1');
    const [newExpanded, setNewExpanded] = React.useState<string | false>('panel11');
    const [newAddExpanded, setNewAddExpanded] = React.useState<string | false>('Shift A');


    const handleChange =
        (panel: string) => (event: React.SyntheticEvent, newExpanded: boolean) => {
            setExpanded(newExpanded ? panel : false);
        };

    const handleNewChange =
        (panel: string) => (event: React.SyntheticEvent, newExpanded: boolean) => {
            setNewExpanded(newExpanded ? panel : false);
        };

    const handleNewAddChange =
        (panel: string) => (event: React.SyntheticEvent, newExpanded: boolean) => {
            setNewAddExpanded(newExpanded ? panel : false);
        };

    const handleChanges = (event: SelectChangeEvent) => {
        if (event.target.name === "shift") {
            newInputData.shift = event.target.value;
            if (event.target.value !== "") {
                setNewAddExpanded(event.target.value);
            }
        } else if (event.target.name === "shiftIncharge") {
            newInputData.shiftIncharge = event.target.value;
            var newTableData = (tableData.map((k) => {
                var sureData = "";
                if (k.shiftIncharge.shiftInchargeA === event.target.value && sureData === 'Shift A') {
                    setNewAddExpanded('Shift A');
                    return k;
                } else if (k.shiftIncharge.shiftInchargeB === event.target.value && sureData === 'Shift B') {
                    setNewAddExpanded('Shift B');
                    return k;
                } else if (k.shiftIncharge.shiftInchargeC === event.target.value && sureData === 'Shift C') {
                    setNewAddExpanded('Shift C');
                    return k;
                } else {
                    setNewAddExpanded('Shift A');
                    return k;
                }
            }))
            setTableData(newTableData);

        } else if (event.target.name === "criteria") {
            newInputData.criteria = event.target.value;
        } else if (event.target.name === "patientName") {
            newInputData.patientName = event.target.value;
            var newTableData = (tableData.map((k) => {
                if (k.pid === event.target.value) {
                    return k;
                } else {
                    return k;
                }
            }))
            setTableData(newTableData);
        } else if (event.target.name === "q15Slot") {
            newInputData.slot = event.target.value;
        }

        setNewInputData({ ...newInputData });
        setNewExpanded('panel11');
        event.preventDefault();
    }


    const handlePdfGenerate = (e: any) => {
        setNewInputData({ ...newInputData });

    }

    const generateTimeSlot = (slot: any, item: any) => (
        <div
            className="col-md-1 d-flex justify-content-between flex-column align-items-center"
            style={{ border: '2px solid #6581BC', borderRadius: '7px', width: '80px', height: '60px' }}
        >
            <div className="box" style={{ borderBottom: '1px solid #6581BC', height: '30px', width: "100%", textAlign: "center", color: "#415F9E" }}>{slot}</div>
            <div className="box">
                {item.data
                    .filter((item: any) => item.q15Slot === slot)
                    .map((filteredItem: any) => (
                        <div key={filteredItem.id} style={{ whiteSpace: "nowrap", color: "#5E7494" }}>
                            <p>{filteredItem ? filteredItem.location : "-"} {"-"} {filteredItem ? filteredItem.activity : "-"}</p>
                        </div>
                    ))}
            </div>
        </div>
    );

    return (
        <div className="row d-flex flex-column" style={{ width: "100%" }}>
        <div className="row" style={{ paddingLeft: "25px" }}> <h4>Q15 Report</h4>
        </div>
        <div className="row" style={{ padding: "40px" }}>
            <div className="col-md-2 h-100 d-flex flex-column" style={{ backgroundColor: '#EAF2FA', borderRadius: "5px" }}>
                <LocalizationProvider dateAdapter={AdapterDateFns}>
                    <DatePicker className="m-3" label="Start Date" value={newInputData.startDate}
                        onChange={(e) => { handleDateChange(e) }} />
                    <DatePicker className="m-3" label="End Date" value={newInputData.endDate}
                        onChange={(e) => { handleNewDateChange(e) }} />
                </LocalizationProvider>
                {/* <TextField className="m-3" id="outlined-basic-1" label="Q15 Date" variant="outlined" onChange={(e: any) => setQ15Date(e.target.value)} /> */}
                <FormControl className="m-3" variant="outlined">
                    <InputLabel color="primary" ><span >Shift
                    </span></InputLabel>
                    <Select color="primary" size="medium" label="Shift" name="shift"
                        value={newInputData.shift} onChange={handleChanges}
                    >
                        <MenuItem value=""><em>None</em></MenuItem>
                        <MenuItem value="Shift A">Shift A</MenuItem>
                        <MenuItem value="Shift B">Shift B</MenuItem>
                        <MenuItem value="Shift C">Shift C</MenuItem>
                    </Select>
                    <FormHelperText />
                </FormControl>
                {/* <TextField className="m-3" id="outlined-basic-1" label="shift" variant="outlined" onChange={(e: any) => setDate(e.target.value)} /> */}
                <FormControl className="m-3" variant="outlined">
                    <InputLabel color="primary" ><span >Slot
                    </span></InputLabel>
                    <Select color="primary" size="medium" label="Slot" name="q15Slot"
                        value={newInputData.slot} onChange={handleChanges}
                    >
                        <MenuItem value="1">Nurse Incharge</MenuItem>
                        <MenuItem value="2">Social Worker</MenuItem>
                        <MenuItem value="3">Start Date</MenuItem>
                        <MenuItem value="1">End Date</MenuItem>
                        <MenuItem value="2">Patient</MenuItem>
                        <MenuItem value="3">Slot</MenuItem>
                        <MenuItem value="3">Shift</MenuItem>
                    </Select>
                    <FormHelperText />
                </FormControl>

                {/* <TextField className="m-3" id="outlined-basic-1" label="slot" variant="outlined" onChange={(e: any) => setDate(e.target.value)} /> */}
                <Autocomplete
                    className="m-3"
                    id="criteria"
                    options={data}
                    getOptionLabel={(option) => option}
                    value={newInputData.patientName}
                    onChange={(e, v) => { newInputData.patientName = v; setNewInputData({ ...newInputData }); }}
                    sx={{ width: "82%" }}
                    renderInput={(params) => (
                        <TextField
                            {...params}
                            variant="outlined"
                            label="patient name"
                            placeholder="patient name"
                            margin="none"
                            fullWidth
                        />
                    )}
                />
                {/* <TextField className="m-3" id="outlined-basic-1" label="patient name" variant="outlined" onChange={(e: any) => setDate(e.target.value)} /> */}
                <Autocomplete
                    className="m-3"
                    id="criteria"
                    options={getStaffData}
                    getOptionLabel={(option) => option}
                    value={newInputData.criteria}
                    onChange={(e, v) => { newInputData.criteria = v; setNewInputData({ ...newInputData }); }}
                    sx={{ width: "82%" }}
                    renderInput={(params) => (
                        <TextField
                            {...params}
                            variant="outlined"
                            label="nurse Incharge"
                            placeholder="nurse Incharge"
                            margin="none"
                            fullWidth
                        />
                    )}
                />
                {/* <TextField className="m-3" id="outlined-basic-1" label="nurse Incharge" variant="outlined" onChange={(e: any) => setDate(e.target.value)} /> */}
                <Button label="Save" style={{ backgroundColor: '#0f3995', marginBottom: "14px" }} onClick={() => handleViewDetails(q15Date)} />
            </div>
            <div className="col-md-10">
                {addCalendarDate.length !== 0 ? addCalendarDate.map((u: any) => (
                    <Accordion expanded={expanded === 'panelmain' + u} onChange={handleChange('panelmain' + u)}>
                        <AccordionSummary style={{ backgroundColor: "#FFF" }} aria-controls="panel1d-content" id="panel1d-header">
                            <Typography style={{ backgroundColor: "#FFF" }}> <span style={{ fontFamily: "poppins", fontSize: "18px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{moment(u).format("MMM DD, YYYY")}</span>

                            </Typography>
                        </AccordionSummary>
                        <AccordionDetails >
                            <Typography >

        {
            tableData.filter(j => u === j.q15Date).length > 0 ? (tableData.filter(j => u === j.q15Date && (newInputData.shiftIncharge === "" ||
                j.shiftIncharge.shiftInchargeA === newInputData.shiftIncharge || j.shiftIncharge.shiftInchargeB === newInputData.shiftIncharge || j.shiftIncharge.shiftInchargeC === newInputData.shiftIncharge) &&
                (newInputData.patientName === "" || newInputData.patientName === j.pid) && (newInputData.criteria === "" || newInputData.criteria === j.enteredBy.shiftA.slot1 || newInputData.criteria === j.enteredBy.shiftA.slot2 ||
                    newInputData.criteria === j.enteredBy.shiftA.slot3 || newInputData.criteria === j.enteredBy.shiftA.slot4 || newInputData.criteria === j.enteredBy.shiftB.slot1 || newInputData.criteria === j.enteredBy.shiftB.slot2
                    || newInputData.criteria === j.enteredBy.shiftB.slot3 || newInputData.criteria === j.enteredBy.shiftB.slot4 || newInputData.criteria === j.enteredBy.shiftC.slot1 || newInputData.criteria === j.enteredBy.shiftC.slot2
                    || newInputData.criteria === j.enteredBy.shiftC.slot3 || newInputData.criteria === j.enteredBy.shiftC.slot4)).map((l: any) => (
                        <Accordion style={{ borderStyle: "none" }} expanded={newExpanded === 'panel11'} onChange={handleNewChange('panel11')}>
                            <AccordionSummary style={{ backgroundColor: "#FFF" }} expandIcon={false} aria-controls="panel11d-content" id="panel11d-header">
                                <Typography style={{ width: "-webkit-fill-available" }}>

                                    <div>
                                        <span style={{ color: "#000", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal", position: 'relative', top: '-14px' }}>Shift Incharge: {newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "" && newAddExpanded === 'Shift B' && staffData.filter((i: any) => i.id === l.shiftIncharge.shiftInchargeC).map((tableData: any) => { return tableData.name[0].given + " " + tableData.name[0].family.charAt(0, 2) }) ||
                                            newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "" && newAddExpanded === 'Shift C' && staffData.filter((i: any) => i.id === l.shiftIncharge.shiftInchargeC).map((tableData: any) => { return tableData.name[0].given + " " + tableData.name[0].family.charAt(0, 2) }) ||
                                            newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "" && newAddExpanded === 'Shift A' && staffData.filter((i: any) => i.id === l.shiftIncharge.shiftInchargeA).map((tableData: any) => { return tableData.name[0].given + " " + tableData.name[0].family.charAt(0, 2) }) ||
                                            newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "" && newAddExpanded === 'Shift B' && staffData.filter((i: any) => i.id === l.shiftIncharge.shiftInchargeB && i.id === newInputData.shiftIncharge).map((tableData: any) => { return tableData.name[0].given + " " + tableData.name[0].family.charAt(0, 2) }) ||
                                            newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "" && newAddExpanded === 'Shift C' && staffData.filter((i: any) => i.id === l.shiftIncharge.shiftInchargeC && i.id === newInputData.shiftIncharge).map((tableData: any) => { return tableData.name[0].given + " " + tableData.name[0].family.charAt(0, 2) }) ||
                                            newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "" && newAddExpanded === 'Shift A' && staffData.filter((i: any) => i.id === l.shiftIncharge.shiftInchargeA && i.id === newInputData.shiftIncharge).map((tableData: any) => { return tableData.name[0].given + " " + tableData.name[0].family.charAt(0, 2) }) ||
                                            staffData.filter((m: any) => m.id === newInputData.shiftIncharge && newInputData.shiftIncharge !== "" && newInputData.shiftIncharge !== l.shiftIncharge.shiftInchargeB && newInputData.shiftIncharge !== l.shiftIncharge.shiftInchargeC && newInputData.shiftIncharge !== l.shiftIncharge.shiftInchargeA).map((m: any) => { return "--" }) && "--"}</span>
                                        <div className="bedorgForm-fields" style={{ zIndex: 1, top: "-15px", display: "flex", flexDirection: "row-reverse", left: "unset", right: "-1px", width: "250px" }}>

                                            <FormControl sx={{ m: 1, minWidth: 120 }} size="small">
                                                <InputLabel id="demo-select-small-label">Shift A</InputLabel>
                                                <Select
                                                    labelId="demo-select-small-label"
                                                    id="shift" name="shift"
                                                    value={newInputData.shift}
                                                    label="Shift"
                                                    onChange={handleChanges}
                                                >
                                                    <MenuItem value=""><em>None</em></MenuItem>
                                                    <MenuItem value="Shift A">Shift A</MenuItem>
                                                    <MenuItem value="Shift B">Shift B</MenuItem>
                                                    <MenuItem value="Shift C">Shift C</MenuItem>
                                                </Select>
                                            </FormControl>
                                            <span style={{ position: "relative", top: "20px" }}>Select Shift:</span>
                                        </div>
                                        <div style={{ position: 'relative', width: '100%', top: '18px', left: '-10px' }}>
                                            <Accordion style={{ borderStyle: "none", top: '-12px' }} expanded={newAddExpanded === 'Shift A'} onChange={handleNewAddChange('Shift A')}>
                                                <AccordionSummary style={{ backgroundColor: "#F7FAFE", borderRadius: '6px' }} aria-controls="panel11Ad-content" id="panel11Ad-header">
                                                    <Typography >
                                                        <span style={{ fontFamily: "poppins", color: "#000", fontSize: "14px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal", position: "relative", top: "0px" }}>Shift A:
                                                            <span style={{ fontFamily: "poppins", color: "#000", fontSize: "14px", fontStyle: "normal", fontWeight: 500, lineHeight: "normal" }}>{newTimeSlot[0]} AM to {newTimeSlot[31]} PM</span>
                                                        </span>
                                                        <div style={{ position: "absolute", left: "unset", whiteSpace: "nowrap", right: "90px", top: "12px", width: "131px", display: "flex", gap: "7px" }}>
                                                            <img src={Rectangle6215}></img>
                                                            <div style={{}}>Patient: {patientData.filter((i: any) => i.id === l.pid).map((tableData: any) => { return tableData.basicDetails[0].name[0].given + " " + tableData.basicDetails[0].name[0].family.charAt(0, 2) })}</div>
                                                        </div>
                                                    </Typography>
                                                </AccordionSummary>
                                                <AccordionDetails style={{ backgroundColor: "#F7FAFE", borderBottomLeftRadius: '6px', borderBottomRightRadius: '6px' }}>
                                                    <Typography style={{ height: "448px", backgroundColor: "#F7FAFE", cursor: 'auto' }}>
                                                        <div style={{ display: "flex", justifyContent: "space-evenly" }}>
                                                            <div style={{ width: "155px", fontFamily: "poppins", fontSize: "14px", fontWeight: 500, color: "#000", lineHeight: "normal" }}>{newTimeSlot[0]} AM to {newTimeSlot[7]} AM:

                                                                <div style={{ position: "absolute", left: "unset", top: "137px", width: "131px", display: "flex", gap: "7px", whiteSpace: "nowrap" }}>
                                                                    <div style={{ position: "relative", top: "5px", width: "fit-contant" }}>Entered By:</div>
                                                                    <img src={Rectangle6215}></img>
                                                                    <div style={{ fontFamily: "poppins", fontSize: "13px", fontWeight: 400, color: "#000", lineHeight: "normal", position: "relative", top: "5px" }}>{((newInputData.criteria === "" && l.enteredBy.shiftA.slot1 !== "" && l.enteredBy.shiftA.slot1 !== null) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "") && staffData.filter((i: any) => i.id === l.enteredBy.shiftA.slot1).map((tableData: any) => { return tableData.name[0].given + " " + tableData.name[0].family.charAt(0, 2) })) ||
                                                                        ((newInputData.criteria !== "" && l.enteredBy.shiftA.slot1 !== "" && l.enteredBy.shiftA.slot1 !== null && l.enteredBy.shiftA.slot1 === newInputData.criteria) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "") && staffData.filter((i: any) => i.id === l.enteredBy.shiftA.slot1).map((tableData: any) => { return tableData.name[0].given + " " + tableData.name[0].family.charAt(0, 2) })) ||
                                                                        staffData.filter((m: any) => m.id === newInputData.criteria && newInputData.criteria !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "") && newInputData.criteria !== l.enteredBy.shiftA.slot1).map((m: any) => { return "--" }) && "--"}</div>
                                                                </div>

                                                            </div >
                                                            <a style={{ cursor: 'pointer' }} onClick={() => { alert(u) }}><div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[0]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[0].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[0].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[0].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[0].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div></a>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[1]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[1].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[1].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[1].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[1].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[2]}</span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[2].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[2].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[2].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[2].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[3]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[3].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[3].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[3].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[3].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[4]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[4].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[4].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[4].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[4].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[5]}</span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[5].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[5].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[5].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[5].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[6]}</span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[6].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[6].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[6].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[6].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[7]}</span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[7].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[7].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[7].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[7].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>

                                                        </div >
                                                        <span style={{ textAlign: "center", border: "1px solid ", position: "relative", left: "7px", display: "flex", width: "calc(100% - 11px)", top: "31px", borderColor: "#E3E8F1" }}></span>
                                                        <div style={{ display: "flex", justifyContent: "space-evenly", position: "relative", top: "46px" }}>
                                                            <div style={{ width: "155px", fontFamily: "poppins", fontSize: "14px", fontWeight: 500, color: "#000", lineHeight: "normal" }}>{newTimeSlot[8]} AM to {newTimeSlot[15]} AM:

                                                                <div style={{ position: "absolute", left: "unset", top: "70px", width: "131px", display: "flex", gap: "7px", whiteSpace: "nowrap" }}>
                                                                    <div style={{ position: "relative", top: "4px", width: "fit-contant" }}>Entered By:</div>
                                                                    <img src={Rectangle6215}></img>
                                                                    <div style={{ fontFamily: "poppins", fontSize: "13px", fontWeight: 400, color: "#000", lineHeight: "normal", position: "relative", top: "5px" }}>{((newInputData.criteria === "" && l.enteredBy.shiftA.slot2 !== "" && l.enteredBy.shiftA.slot2 !== null) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "") && staffData.filter((i: any) => i.id === l.enteredBy.shiftA.slot2).map((tableData: any) => { return tableData.name[0].given + " " + tableData.name[0].family.charAt(0, 2) })) ||
                                                                        ((newInputData.criteria !== "" && l.enteredBy.shiftA.slot2 !== "" && l.enteredBy.shiftA.slot2 !== null && l.enteredBy.shiftA.slot2 === newInputData.criteria) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "") && staffData.filter((i: any) => i.id === l.enteredBy.shiftA.slot2).map((tableData: any) => { return tableData.name[0].given + " " + tableData.name[0].family.charAt(0, 2) })) ||
                                                                        staffData.filter((m: any) => m.id === newInputData.criteria && newInputData.criteria !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "") && newInputData.criteria !== l.enteredBy.shiftA.slot2).map((m: any) => { return "--" }) && "--"}</div>
                                                                </div>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[8]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[8].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[8].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[8].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[8].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[9]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[9].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[9].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[9].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[9].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[10]}</span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[10].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[10].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[10].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[10].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[11]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[11].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[11].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[11].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[11].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[12]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[12].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[12].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[12].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[12].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[13]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[13].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[13].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[13].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[13].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[14]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[14].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[14].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[14].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[14].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[15]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[15].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[15].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[15].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[15].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>

                                                        </div>
                                                        <span style={{ textAlign: "center", border: "1px solid", position: "relative", left: "7px", display: "flex", width: "calc(100% - 11px)", top: "75px", borderColor: "#E3E8F1" }}></span>
                                                        <div style={{ display: "flex", justifyContent: "space-evenly", position: "relative", top: "86px" }}>
                                                            <div style={{ width: "155px", fontFamily: "poppins", fontSize: "14px", fontWeight: 500, color: "#000", lineHeight: "normal" }}>{newTimeSlot[16]} PM to {newTimeSlot[23]} PM:

                                                                <div style={{ position: "absolute", left: "unset", top: "70px", width: "131px", display: "flex", gap: "7px", whiteSpace: "nowrap" }}>
                                                                    <div style={{ position: "relative", top: "5px", width: "fit-contant" }}>Entered By:</div>
                                                                    <img src={Rectangle6215}></img>
                                                                    <div style={{ fontFamily: "poppins", fontSize: "13px", fontWeight: 400, color: "#000", lineHeight: "normal", position: "relative", top: "5px" }}>{((newInputData.criteria === "" && l.enteredBy.shiftA.slot3 !== "" && l.enteredBy.shiftA.slot3 !== null) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "") && staffData.filter((i: any) => i.id === l.enteredBy.shiftA.slot3).map((tableData: any) => { return tableData.name[0].given + " " + tableData.name[0].family.charAt(0, 2) })) ||
                                                                        ((newInputData.criteria !== "" && l.enteredBy.shiftA.slot3 !== "" && l.enteredBy.shiftA.slot3 !== null && l.enteredBy.shiftA.slot3 === newInputData.criteria) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "") && staffData.filter((i: any) => i.id === l.enteredBy.shiftA.slot3).map((tableData: any) => { return tableData.name[0].given + " " + tableData.name[0].family.charAt(0, 2) })) ||
                                                                        staffData.filter((m: any) => m.id === newInputData.criteria && newInputData.criteria !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "") && newInputData.criteria !== l.enteredBy.shiftA.slot3).map((m: any) => { return "--" }) && "--"}</div>
                                                                </div>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[16]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[16].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[16].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[16].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[16].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[17]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[17].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[17].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[17].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[17].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[18]}</span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[18].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[18].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[18].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[18].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[19]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[19].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[19].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[19].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[19].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[20]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[20].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[20].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[20].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[20].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[21]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[21].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[21].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[21].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[21].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[22]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[22].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[22].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[22].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[22].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[23]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[23].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[23].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[23].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[23].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>

                                                        </div>
                                                        <span style={{ textAlign: "center", border: "1px solid", position: "relative", left: "7px", display: "flex", width: "calc(100% - 11px)", top: "116px", borderColor: "#E3E8F1" }}></span>
                                                        <div style={{ display: "flex", justifyContent: "space-evenly", position: "relative", top: "130px" }}>
                                                            <div style={{ width: "155px", fontFamily: "poppins", fontSize: "14px", fontWeight: 500, color: "#000", lineHeight: "normal" }}>{newTimeSlot[24]} PM to {newTimeSlot[31]} PM:

                                                                <div style={{ position: "absolute", left: "unset", top: "70px", width: "131px", display: "flex", gap: "7px", whiteSpace: "nowrap" }}>
                                                                    <div style={{ position: "relative", top: "5px", width: "fit-contant" }}>Entered By:</div>
                                                                    <img src={Rectangle6215}></img>
                                                                    <div style={{ fontFamily: "poppins", fontSize: "13px", fontWeight: 400, color: "#000", lineHeight: "normal", position: "relative", top: "5px" }}>{((newInputData.criteria === "" && l.enteredBy.shiftA.slot4 !== "" && l.enteredBy.shiftA.slot4 !== null) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "") && staffData.filter((i: any) => i.id === l.enteredBy.shiftA.slot4).map((tableData: any) => { return tableData.name[0].given + " " + tableData.name[0].family.charAt(0, 2) })) ||
                                                                        ((newInputData.criteria !== "" && l.enteredBy.shiftA.slot4 !== "" && l.enteredBy.shiftA.slot4 !== null && l.enteredBy.shiftA.slot4 === newInputData.criteria) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "") && staffData.filter((i: any) => i.id === l.enteredBy.shiftA.slot4).map((tableData: any) => { return tableData.name[0].given + " " + tableData.name[0].family.charAt(0, 2) })) ||
                                                                        staffData.filter((m: any) => m.id === newInputData.criteria && newInputData.criteria !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "") && newInputData.criteria !== l.enteredBy.shiftA.slot4).map((m: any) => { return "--" }) && "--"}</div>
                                                                </div>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[24]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[24].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[24].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[24].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[24].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[25]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[25].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[25].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[25].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[25].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[26]}</span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[26].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[26].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[26].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[26].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[27]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[27].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[27].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[27].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[27].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[28]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[28].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[28].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[28].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[28].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[29]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[29].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[29].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[29].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[29].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[30]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[30].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[30].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[30].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[30].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[31]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[31].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[31].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[31].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[31].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeA && l.shiftIncharge.shiftInchargeA !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeA !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                        </div>
                                                    </Typography >
                                                </AccordionDetails >
                                            </Accordion >
                                            <Accordion style={{ borderStyle: "none", top: '-6px' }} expanded={newAddExpanded === 'Shift B'} onChange={handleNewAddChange('Shift B')}>
                                                <AccordionSummary style={{ backgroundColor: "#F7FAFE", borderRadius: '6px' }} aria-controls="panel11Ad-content" id="panel11Ad-header">
                                                    <Typography>
                                                        <span style={{ fontFamily: "poppins", color: "#000", fontSize: "14px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal", position: "relative", top: "0px" }}>Shift B:
                                                            <span style={{ fontFamily: "poppins", color: "#000", fontSize: "14px", fontStyle: "normal", fontWeight: 500, lineHeight: "normal" }}>{newTimeSlot[32]} PM to {newTimeSlot[63]} PM</span>
                                                        </span>
                                                        <div style={{ position: "absolute", left: "unset", top: "12px", width: "131px", display: "flex", gap: "7px", whiteSpace: "nowrap", right: "90px" }}>
                                                            <img src={Rectangle6215}></img>
                                                            <div style={{}}>Patient: {patientData.filter((i: any) => i.id === l.pid).map((tableData: any) => { return tableData.basicDetails[0].name[0].given + " " + tableData.basicDetails[0].name[0].family.charAt(0, 2) })}</div>
                                                        </div>
                                                    </Typography>
                                                </AccordionSummary>
                                                <AccordionDetails style={{ backgroundColor: "#F7FAFE", borderBottomLeftRadius: '6px', borderBottomRightRadius: '6px' }}>
                                                    <Typography style={{ height: "448px", backgroundColor: "#F7FAFE" }}>
                                                        <div style={{ display: "flex", justifyContent: "space-evenly" }}>
                                                            <div style={{ width: "155px", fontFamily: "poppins", fontSize: "14px", fontWeight: 500, color: "#000", lineHeight: "normal" }}>{newTimeSlot[32]} PM to {newTimeSlot[39]} PM:

                                                                <div style={{ position: "absolute", left: "unset", top: "137px", width: "131px", display: "flex", gap: "7px", whiteSpace: "nowrap" }}>
                                                                    <div style={{ position: "relative", top: "5px", width: "fit-contant" }}>Entered By:</div>
                                                                    <img src={Rectangle6215}></img>
                                                                    <div style={{ fontFamily: "poppins", fontSize: "13px", fontWeight: 400, color: "#000", lineHeight: "normal", position: "relative", top: "5px" }}>{((newInputData.criteria === "" && l.enteredBy.shiftB.slot1 !== "" && l.enteredBy.shiftB.slot1 !== null) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "") && staffData.filter((i: any) => i.id === l.enteredBy.shiftB.slot1).map((tableData: any) => { return tableData.name[0].given + " " + tableData.name[0].family.charAt(0, 2) })) ||
                                                                        ((newInputData.criteria !== "" && l.enteredBy.shiftB.slot1 !== "" && l.enteredBy.shiftB.slot1 !== null && l.enteredBy.shiftB.slot1 === newInputData.criteria) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "") && staffData.filter((i: any) => i.id === l.enteredBy.shiftB.slot1).map((tableData: any) => { return tableData.name[0].given + " " + tableData.name[0].family.charAt(0, 2) })) ||
                                                                        staffData.filter((m: any) => m.id === newInputData.criteria && newInputData.criteria !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "") && newInputData.criteria !== l.enteredBy.shiftB.slot1).map((m: any) => { return "--" }) && "--"}</div>
                                                                </div>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[32]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[32].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[32].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[32].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[32].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[33]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[33].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[33].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[33].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[33].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[34]}</span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[34].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[34].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[34].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[34].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[35]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[35].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[35].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[35].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[35].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[36]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[36].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[36].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[36].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[36].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[37]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[37].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[37].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[37].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[37].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[38]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[38].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[38].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[38].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[38].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[39]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[39].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[39].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[39].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[39].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>

                                                        </div>
                                                        <span style={{ textAlign: "center", border: "1px solid ", position: "relative", left: "7px", display: "flex", width: "calc(100% - 11px)", top: "31px", borderColor: "#E3E8F1" }}></span>
                                                        <div style={{ display: "flex", justifyContent: "space-evenly", position: "relative", top: "46px" }}>
                                                            <div style={{ width: "155px", fontFamily: "poppins", fontSize: "14px", fontWeight: 500, color: "#000", lineHeight: "normal" }}>{newTimeSlot[40]} PM to {newTimeSlot[47]} PM:

                                                                <div style={{ position: "absolute", left: "unset", top: "70px", width: "131px", display: "flex", gap: "7px", whiteSpace: "nowrap" }}>
                                                                    <div style={{ position: "relative", top: "5px", width: "fit-contant" }}>Entered By:</div>
                                                                    <img src={Rectangle6215}></img>
                                                                    <div style={{ fontFamily: "poppins", fontSize: "13px", fontWeight: 400, color: "#000", lineHeight: "normal", position: "relative", top: "5px" }}>{((newInputData.criteria === "" && l.enteredBy.shiftB.slot2 !== "" && l.enteredBy.shiftB.slot2 !== null) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "") && staffData.filter((i: any) => i.id === l.enteredBy.shiftB.slot2).map((tableData: any) => { return tableData.name[0].given + " " + tableData.name[0].family.charAt(0, 2) })) ||
                                                                        ((newInputData.criteria !== "" && l.enteredBy.shiftB.slot2 !== "" && l.enteredBy.shiftB.slot2 !== null && l.enteredBy.shiftB.slot2 === newInputData.criteria) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "") && staffData.filter((i: any) => i.id === l.enteredBy.shiftB.slot2).map((tableData: any) => { return tableData.name[0].given + " " + tableData.name[0].family.charAt(0, 2) })) ||
                                                                        staffData.filter((m: any) => m.id === newInputData.criteria && newInputData.criteria !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "") && newInputData.criteria !== l.enteredBy.shiftB.slot2).map((m: any) => { return "--" }) && "--"}</div>
                                                                </div>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[40]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[40].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[40].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[40].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[40].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[41]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[41].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[41].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[41].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[41].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[42]}</span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[42].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[42].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[42].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[42].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[43]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[43].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[43].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[43].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[43].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[44]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[44].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[44].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[44].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[44].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[45]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[45].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[45].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[45].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[45].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[46]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[46].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[46].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[46].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[46].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[47]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[47].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[47].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[47].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[47].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>

                                                        </div>
                                                        <span style={{ textAlign: "center", border: "1px solid", position: "relative", left: "7px", display: "flex", width: "calc(100% - 11px)", top: "75px", borderColor: "#E3E8F1" }}></span>
                                                        <div style={{ display: "flex", justifyContent: "space-evenly", position: "relative", top: "86px" }}>
                                                            <div style={{ width: "155px", fontFamily: "poppins", fontSize: "14px", fontWeight: 500, color: "#000", lineHeight: "normal" }}>{newTimeSlot[48]} PM to {newTimeSlot[55]} PM:

                                                                <div style={{ position: "absolute", left: "unset", top: "70px", width: "131px", display: "flex", gap: "7px", whiteSpace: "nowrap" }}>
                                                                    <div style={{ position: "relative", top: "5px", width: "fit-contant" }}>Entered By:</div>
                                                                    <img src={Rectangle6215}></img>
                                                                    <div style={{ fontFamily: "poppins", fontSize: "13px", fontWeight: 400, color: "#000", lineHeight: "normal", position: "relative", top: "5px" }}>{((newInputData.criteria === "" && l.enteredBy.shiftB.slot3 !== "" && l.enteredBy.shiftB.slot3 !== null) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "") && staffData.filter((i: any) => i.id === l.enteredBy.shiftB.slot3).map((tableData: any) => { return tableData.name[0].given + " " + tableData.name[0].family.charAt(0, 2) })) ||
                                                                        ((newInputData.criteria !== "" && l.enteredBy.shiftB.slot3 !== "" && l.enteredBy.shiftB.slot3 !== null && l.enteredBy.shiftB.slot3 === newInputData.criteria) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "") && staffData.filter((i: any) => i.id === l.enteredBy.shiftB.slot3).map((tableData: any) => { return tableData.name[0].given + " " + tableData.name[0].family.charAt(0, 2) })) ||
                                                                        staffData.filter((m: any) => m.id === newInputData.criteria && newInputData.criteria !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "") && newInputData.criteria !== l.enteredBy.shiftB.slot3).map((m: any) => { return "--" }) && "--"}</div>
                                                                </div>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[48]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[48].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[48].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[48].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[48].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[49]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[49].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[49].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[49].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[49].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[50]}</span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[50].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[50].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[50].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[50].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[51]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[51].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[51].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[51].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[51].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[52]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[52].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[52].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[52].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[52].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[53]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[53].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[53].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[53].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[53].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[54]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[54].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[54].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[54].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[54].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[55]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[55].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[55].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[55].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[55].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>

                                                        </div>
                                                        <span style={{ textAlign: "center", border: "1px solid", position: "relative", left: "7px", display: "flex", width: "calc(100% - 11px)", top: "116px", borderColor: "#E3E8F1" }}></span>
                                                        <div style={{ display: "flex", justifyContent: "space-evenly", position: "relative", top: "130px" }}>
                                                            <div style={{ width: "155px", fontFamily: "poppins", fontSize: "14px", fontWeight: 500, color: "#000", lineHeight: "normal" }}>{newTimeSlot[56]} PM to {newTimeSlot[63]} PM:

                                                                <div style={{ position: "absolute", left: "unset", top: "70px", width: "131px", display: "flex", gap: "7px", whiteSpace: "nowrap" }}>
                                                                    <div style={{ position: "relative", top: "5px", width: "fit-contant" }}>Entered By:</div>
                                                                    <img src={Rectangle6215}></img>
                                                                    <div style={{ fontFamily: "poppins", fontSize: "13px", fontWeight: 400, color: "#000", lineHeight: "normal", position: "relative", top: "5px" }}>{((newInputData.criteria === "" && l.enteredBy.shiftB.slot4 !== "" && l.enteredBy.shiftB.slot4 !== null) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "") && staffData.filter((i: any) => i.id === l.enteredBy.shiftB.slot4).map((tableData: any) => { return tableData.name[0].given + " " + tableData.name[0].family.charAt(0, 2) })) ||
                                                                        ((newInputData.criteria !== "" && l.enteredBy.shiftB.slot4 !== "" && l.enteredBy.shiftB.slot4 !== null && l.enteredBy.shiftB.slot4 === newInputData.criteria) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "") && staffData.filter((i: any) => i.id === l.enteredBy.shiftB.slot4).map((tableData: any) => { return tableData.name[0].given + " " + tableData.name[0].family.charAt(0, 2) })) ||
                                                                        staffData.filter((m: any) => m.id === newInputData.criteria && newInputData.criteria !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "") && newInputData.criteria !== l.enteredBy.shiftB.slot4).map((m: any) => { return "--" }) && "--"}</div>
                                                                </div>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[56]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[56].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[56].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[56].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[56].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[57]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[57].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[57].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[57].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[57].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[58]}</span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[58].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[58].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[58].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[58].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[59]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[59].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[59].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[59].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[59].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[60]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[60].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[60].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[60].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[60].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[61]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[61].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[61].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[61].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[61].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[62]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[62].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[62].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[62].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[62].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[63]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[63].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[63].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[63].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[63].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeB && l.shiftIncharge.shiftInchargeB !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeB !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>

                                                        </div>
                                                    </Typography>
                                                </AccordionDetails>
                                            </Accordion>
                                            <Accordion style={{ borderStyle: "none", marginBottom: '40px' }} expanded={newAddExpanded === 'Shift C'} onChange={handleNewAddChange('Shift C')}>
                                                <AccordionSummary style={{ backgroundColor: "#F7FAFE", borderRadius: '6px' }} aria-controls="panel11Ad-content" id="panel11Ad-header">
                                                    <Typography>
                                                        <span style={{ fontFamily: "poppins", color: "#000", fontSize: "14px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal", position: "relative", top: "0px" }}>Shift C:
                                                            <span style={{ fontFamily: "poppins", color: "#000", fontSize: "14px", fontStyle: "normal", fontWeight: 500, lineHeight: "normal" }}>{newTimeSlot[64]} AM to {newTimeSlot[95]} AM</span>
                                                        </span>
                                                        <div style={{ position: "absolute", left: "unset", top: "12px", width: "131px", display: "flex", gap: "7px", whiteSpace: "nowrap", right: "90px" }}>
                                                            <img src={Rectangle6215}></img>
                                                            <div style={{}}>Patient: {l.pid !== "" ? patientData.filter((i: any) => i.id === l.pid).map((tableData: any) => { return tableData.basicDetails[0].name[0].given + " " + tableData.basicDetails[0].name[0].family.charAt(0, 2) }) : "--"}</div>
                                                        </div>
                                                    </Typography>
                                                </AccordionSummary>
                                                <AccordionDetails style={{ backgroundColor: "#F7FAFE", borderBottomLeftRadius: '6px', borderBottomRightRadius: '6px' }}>
                                                    <Typography style={{ height: "448px", backgroundColor: "#F7FAFE" }}>
                                                        <div style={{ display: "flex", justifyContent: "space-evenly" }}>
                                                            <div style={{ width: "155px", fontFamily: "poppins", fontSize: "14px", fontWeight: 500, color: "#000", lineHeight: "normal" }}>{newTimeSlot[64]} AM to {newTimeSlot[71]} AM:

                                                                <div style={{ position: "absolute", left: "unset", top: "137px", width: "131px", display: "flex", gap: "7px", whiteSpace: "nowrap" }}>
                                                                    <div style={{ position: "relative", top: "5px", width: "fit-contant" }}>Entered By:</div>
                                                                    <img src={Rectangle6215}></img>
                                                                    <div style={{ fontFamily: "poppins", fontSize: "13px", fontWeight: 400, color: "#000", lineHeight: "normal", position: "relative", top: "5px" }}>{((newInputData.criteria === "" && l.enteredBy.shiftC.slot1 !== "" && l.enteredBy.shiftC.slot1 !== null) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "") && staffData.filter((i: any) => i.id === l.enteredBy.shiftC.slot1).map((tableData: any) => { return tableData.name[0].given + " " + tableData.name[0].family.charAt(0, 2) })) ||
                                                                        ((newInputData.criteria !== "" && l.enteredBy.shiftC.slot1 !== "" && l.enteredBy.shiftC.slot1 !== null && l.enteredBy.shiftC.slot1 === newInputData.criteria) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "") && staffData.filter((i: any) => i.id === l.enteredBy.shiftC.slot1).map((tableData: any) => { return tableData.name[0].given + " " + tableData.name[0].family.charAt(0, 2) })) ||
                                                                        staffData.filter((m: any) => m.id === newInputData.criteria && newInputData.criteria !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "") && newInputData.criteria !== l.enteredBy.shiftC.slot1).map((m: any) => { return "--" }) && "--"}</div>
                                                                </div>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[64]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[64].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[64].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[64].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[64].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[65]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[65].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[65].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[65].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[65].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[66]}</span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[66].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[66].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[66].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[66].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[67]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[67].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[67].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[67].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[67].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[68]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[68].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[68].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[68].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[68].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[69]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[69].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[69].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[69].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[69].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[70]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[70].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[70].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[70].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[70].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[71]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[71].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[71].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[71].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[71].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>

                                                        </div>
                                                        <span style={{ textAlign: "center", border: "1px solid ", position: "relative", left: "7px", display: "flex", width: "calc(100% - 11px)", top: "31px", borderColor: "#E3E8F1" }}></span>
                                                        <div style={{ display: "flex", justifyContent: "space-evenly", position: "relative", top: "46px" }}>
                                                            <div style={{ width: "157px", fontFamily: "poppins", fontSize: "14px", fontWeight: 500, color: "#000", lineHeight: "normal" }}>{newTimeSlot[72]} AM to {newTimeSlot[79]} AM:

                                                                <div style={{ position: "absolute", left: "unset", top: "70px", width: "131px", display: "flex", gap: "7px", whiteSpace: "nowrap" }}>
                                                                    <div style={{ position: "relative", top: "5px", width: "fit-contant" }}>Entered By:</div>
                                                                    <img src={Rectangle6215}></img>
                                                                    <div style={{ fontFamily: "poppins", fontSize: "13px", fontWeight: 400, color: "#000", lineHeight: "normal", position: "relative", top: "5px" }}>{((newInputData.criteria === "" && l.enteredBy.shiftC.slot2 !== "" && l.enteredBy.shiftC.slot2 !== null) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "") && staffData.filter((i: any) => i.id === l.enteredBy.shiftC.slot2).map((tableData: any) => { return tableData.name[0].given + " " + tableData.name[0].family.charAt(0, 2) })) ||
                                                                        ((newInputData.criteria !== "" && l.enteredBy.shiftC.slot2 !== "" && l.enteredBy.shiftC.slot2 !== null && l.enteredBy.shiftC.slot2 === newInputData.criteria) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "") && staffData.filter((i: any) => i.id === l.enteredBy.shiftC.slot2).map((tableData: any) => { return tableData.name[0].given + " " + tableData.name[0].family.charAt(0, 2) })) ||
                                                                        staffData.filter((m: any) => m.id === newInputData.criteria && newInputData.criteria !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "") && newInputData.criteria !== l.enteredBy.shiftC.slot2).map((m: any) => { return "--" }) && "--"}</div>
                                                                </div>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[72]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[72].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[72].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[72].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[72].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[73]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[73].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[73].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[73].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[73].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[74]}</span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[74].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[74].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[74].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[74].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[75]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[75].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[75].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[75].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[75].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[76]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[76].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[76].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[76].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[76].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[77]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[77].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[77].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[77].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[77].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[78]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[78].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[78].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[78].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[78].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[79]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[79].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[79].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[79].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[79].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>

                                                        </div>
                                                        <span style={{ textAlign: "center", border: "1px solid", position: "relative", left: "7px", display: "flex", width: "calc(100% - 11px)", top: "75px", borderColor: "#E3E8F1" }}></span>
                                                        <div style={{ display: "flex", justifyContent: "space-evenly", position: "relative", top: "86px" }}>
                                                            <div style={{ width: "159px", fontFamily: "poppins", fontSize: "14px", fontWeight: 500, color: "#000", lineHeight: "normal" }}>{newTimeSlot[80]} AM to {newTimeSlot[87]} AM:

                                                                <div style={{ position: "absolute", left: "unset", top: "70px", width: "131px", display: "flex", gap: "7px", whiteSpace: "nowrap" }}>
                                                                    <div style={{ position: "relative", top: "5px", width: "fit-contant" }}>Entered By:</div>
                                                                    <img src={Rectangle6215}></img>
                                                                    <div style={{ fontFamily: "poppins", fontSize: "13px", fontWeight: 400, color: "#000", lineHeight: "normal", position: "relative", top: "5px" }}>{((newInputData.criteria === "" && l.enteredBy.shiftC.slot3 !== "" && l.enteredBy.shiftC.slot3 !== null) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "") && staffData.filter((i: any) => i.id === l.enteredBy.shiftC.slot3).map((tableData: any) => { return tableData.name[0].given + " " + tableData.name[0].family.charAt(0, 2) })) ||
                                                                        ((newInputData.criteria !== "" && l.enteredBy.shiftC.slot3 !== "" && l.enteredBy.shiftC.slot3 !== null && l.enteredBy.shiftC.slot3 === newInputData.criteria) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "") && staffData.filter((i: any) => i.id === l.enteredBy.shiftC.slot3).map((tableData: any) => { return tableData.name[0].given + " " + tableData.name[0].family.charAt(0, 2) })) ||
                                                                        staffData.filter((m: any) => m.id === newInputData.criteria && newInputData.criteria !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "") && newInputData.criteria !== l.enteredBy.shiftC.slot3).map((m: any) => { return "--" }) && "--"}</div>
                                                                </div>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[80]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[80].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[80].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[80].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[80].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[81]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[81].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[81].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[81].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[81].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[82]}</span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[82].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[82].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[82].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[82].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[83]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[83].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[83].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[83].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[83].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[84]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[84].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[84].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[84].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[84].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[85]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[85].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[85].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[85].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[85].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[86]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[86].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[86].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[86].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[86].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[87]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[87].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[87].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[87].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[87].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>

                                                        </div>
                                                        <span style={{ textAlign: "center", border: "1px solid", position: "relative", left: "7px", display: "flex", width: "calc(100% - 11px)", top: "116px", borderColor: "#E3E8F1" }}></span>
                                                        <div style={{ display: "flex", justifyContent: "space-evenly", position: "relative", top: "130px" }}>
                                                            <div style={{ width: "158px", fontFamily: "poppins", fontSize: "14px", fontWeight: 500, color: "#000", lineHeight: "normal" }}>{newTimeSlot[88]} AM to {newTimeSlot[95]} AM:

                                                                <div style={{ position: "absolute", left: "unset", top: "70px", width: "131px", display: "flex", gap: "7px", whiteSpace: "nowrap" }}>
                                                                    <div style={{ position: "relative", top: "5px", width: "fit-contant" }}>Entered By:</div>
                                                                    <img src={Rectangle6215}></img>
                                                                    <div style={{ fontFamily: "poppins", fontSize: "13px", fontWeight: 400, color: "#000", lineHeight: "normal", position: "relative", top: "5px" }}>{((newInputData.criteria === "" && l.enteredBy.shiftC.slot4 !== "" && l.enteredBy.shiftC.slot4 !== null) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "") && staffData.filter((i: any) => i.id === l.enteredBy.shiftC.slot4).map((tableData: any) => { return tableData.name[0].given + " " + tableData.name[0].family.charAt(0, 2) })) ||
                                                                        ((newInputData.criteria !== "" && l.enteredBy.shiftC.slot4 !== "" && l.enteredBy.shiftC.slot4 !== null && l.enteredBy.shiftC.slot4 === newInputData.criteria) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "") && staffData.filter((i: any) => i.id === l.enteredBy.shiftC.slot4).map((tableData: any) => { return tableData.name[0].given + " " + tableData.name[0].family.charAt(0, 2) })) ||
                                                                        staffData.filter((m: any) => m.id === newInputData.criteria && newInputData.criteria !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "") && newInputData.criteria !== l.enteredBy.shiftC.slot4).map((m: any) => { return "--" }) && "--"}</div>
                                                                </div>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[88]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[88].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[88].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[88].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[88].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[89]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[89].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[89].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[89].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[89].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[90]}</span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[90].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[90].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[90].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[90].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[91]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[91].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[91].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[91].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[91].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[92]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[92].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[92].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[92].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "A" + newTimeSlot[92].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[93]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[93].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[93].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[93].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "B" + newTimeSlot[93].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[94]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[94].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[94].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[94].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "C" + newTimeSlot[94].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>
                                                            <div style={{ display: "flex", gap: "10px", flexDirection: "column", width: "60px", height: "73px", border: "1px solid", borderRadius: "4px" }}>
                                                                <span style={{ textAlign: "center", color: " #415F9E", fontFamily: "poppins", fontSize: "15px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal" }}>{newTimeSlot[95]} </span>
                                                                <span style={{ textAlign: "center", border: "1px solid #E3E8F1", width: "45px", position: "relative", left: "7px" }}></span>
                                                                <span style={{ textAlign: "center", color: " #5E7494", fontFamily: "poppins", fontSize: "16px", fontStyle: "normal", fontWeight: 600, lineHeight: "130%", letterSpacing: "0.016px" }} >{l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[95].slice(0, 2) && m.location !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[95].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).map((n: any) => { return n.location }) : "NA"}-{l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[95].slice(0, 2) && m.activity !== "" && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).length > 0 ? l.data.filter((m: any) => m.q15Slot === "D" + newTimeSlot[95].slice(0, 2) && ((newInputData.shiftIncharge !== "" && newInputData.shiftIncharge === l.shiftIncharge.shiftInchargeC && l.shiftIncharge.shiftInchargeC !== "") || newInputData.shiftIncharge === "" && l.shiftIncharge.shiftInchargeC !== "")).map((n: any) => { return n.activity }) : "NA"}</span>
                                                            </div>

                                                        </div>
                                                    </Typography>
                                                </AccordionDetails>
                                            </Accordion>
                                        </div >
                                    </div >
                                </Typography >
                            </AccordionSummary >
                        </Accordion >))) : (
        <div style={{ fontFamily: "poppins", fontSize: "18px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal", textAlign: 'center' }}>No Records Found</div>
    )
}
                                </Typography >
                            </AccordionDetails >
                        </Accordion >
                    )) : <div style={{ fontFamily: "poppins", fontSize: "18px", fontStyle: "normal", fontWeight: 600, lineHeight: "normal", textAlign: 'center' }}>No Records Found</div>
}
                </div >
            </div >
        </div >
    );
} 